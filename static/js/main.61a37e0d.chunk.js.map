{"version":3,"sources":["containers/App.module.css","components/Cockpit/Cockpit.module.css","components/Persons/Person/Person.module.css","components/Cockpit/Cockpit.js","components/Persons/Person/Person.js","components/Persons/Persons.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","D-flex-c","Red","Bigger","Green","Orange","Black","Person","cockpit","props","classes","classLister","styles","btnClass","numOfPersons","persons","length","showPersons","pClass","push","react_default","a","createElement","className","onClick","toggleShowPersons","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","clicked","name","age","children","type","onChange","changed","value","Component","Persons","nextProps","nextContext","nextState","_this2","map","person","index","Persons_Person_Person","key","id","evt","state","nameChangedHandler","personIndex","findIndex","p","objectSpread","target","newPersons","toConsumableArray","slice","concat","setState","deletePersonHandler","components_Persons_Persons","Cockpit","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","title","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61a37e0d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2ezK2\",\"D-flex-c\":\"App_D-flex-c__3yx8Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Red\":\"Cockpit_Red__3G4IL\",\"Bigger\":\"Cockpit_Bigger__OsfZo\",\"Green\":\"Cockpit_Green__1zAb2\",\"Orange\":\"Cockpit_Orange__3KRv6\",\"Black\":\"Cockpit_Black__3rgXR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__2Rq-e\"};","import React from 'react';\r\nimport classLister from 'css-module-class-lister';\r\nimport styles from './Cockpit.module.css';\r\n\r\nconst cockpit = props => {\r\n  const classes = classLister(styles);\r\n  let btnClass = '';\r\n  const numOfPersons = props.persons.length;\r\n  if (props.showPersons) {\r\n    if (numOfPersons < 1) {\r\n      btnClass = 'Black';\r\n    } else if (numOfPersons < 2) {\r\n      btnClass = 'Red';\r\n    } else if (numOfPersons < 3) {\r\n      btnClass = 'Orange';\r\n    } else {\r\n      btnClass = 'Green';\r\n    }\r\n  }\r\n  let pClass = [];\r\n  props.persons.length <= 1 && pClass.push('Red');\r\n  props.persons.length <= 0 && pClass.push('Bigger');\r\n\r\n  return (\r\n    <div className={classes('Cockpit')}>\r\n      <h1>Hi, I'm a React App!</h1>\r\n      <p className={classes(pClass)}>This is really working!!!</p>\r\n      <button className={classes(btnClass)} onClick={props.toggleShowPersons}>\r\n        Toggle Persons!\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default cockpit;\r\n","import React, { Component } from 'react';\r\n// import { Radium } from 'radium';\r\nimport styles from './Person.module.css';\r\nimport classLister from 'css-module-class-lister';\r\n\r\nconst classes = classLister(styles);\r\nclass Person extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log('[Person.js] Inside constructor', props);\r\n  }\r\n\r\n  componentWillMount() {\r\n    console.log('[Person.js] Inside componentWillMount()');\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('[Person.js] Inside componentDidMount()');\r\n  }\r\n  /* componentWillUnmount() {\r\n    console.log(\r\n      '[Person.js] Inside componentWillUnmount()',\r\n      `${this.props.name} is being removed`\r\n    );\r\n  } */\r\n  render() {\r\n    console.log('[Person.js] Inside render()');\r\n    return (\r\n      <div className={classes('Person')}>\r\n        <p onClick={this.props.clicked}>\r\n          I'm {this.props.name} and I am {this.props.age} years old!\r\n        </p>\r\n        <p>{this.props.children}</p>\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.props.changed}\r\n          value={this.props.name}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Person;\r\n","import React, { Component } from 'react';\r\nimport Person from './Person/Person';\r\n\r\nclass Persons extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    console.log('[Persons.js] Inside constructor', props);\r\n  }\r\n\r\n  componentWillMount() {\r\n    console.log('[Persons.js] Inside componentWillMount()');\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('[Persons.js] Inside componentDidMount()');\r\n  }\r\n  /* componentWillUnmount() {\r\n    console.log(\r\n      '[Persons.js] Inside componentWillUnmount()',\r\n      `All Persons are being removed`\r\n      );\r\n    } */\r\n  componentWillReceiveProps(nextProps, nextContext) {\r\n    console.log(\r\n      '[UPDATE Persons.js] Inside componentReceiveProps',\r\n      nextProps,\r\n      nextContext\r\n    );\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n    console.log(\r\n      '[UPDATE Persons.js] Inside shouldComponentUpdate',\r\n      nextProps,\r\n      nextState,\r\n      nextContext\r\n    );\r\n    return (\r\n      this.props.persons !== nextProps.persons ||\r\n      this.props.clicked !== nextProps.clicked ||\r\n      this.props.changed !== nextProps.changed\r\n    );\r\n  }\r\n  componentWillUpdate(nextProps, nextState, nextContext) {\r\n    console.log(\r\n      '[UPDATE Persons.js] Inside componentWillUpdate',\r\n      nextProps,\r\n      nextState,\r\n      nextContext\r\n    );\r\n  }\r\n  componentDidUpdate(nextProps, nextState, nextContext) {\r\n    console.log(\r\n      '[UPDATE Persons.js] Inside componentDidUpdate',\r\n      nextProps,\r\n      nextState,\r\n      nextContext\r\n    );\r\n  }\r\n  render() {\r\n    console.log('[Persons.js] Inside render()');\r\n    return this.props.persons.map((person, index) => (\r\n      <Person\r\n        clicked={() => this.props.clicked(index)}\r\n        name={person.name}\r\n        age={person.age}\r\n        key={person.id}\r\n        changed={evt => this.props.changed(evt, person.id)}\r\n      >\r\n        {this.props.children}\r\n      </Person>\r\n    ));\r\n  }\r\n}\r\nexport default Persons;\r\n","import React, { PureComponent } from 'react';\nimport styles from './App.module.css';\nimport classLister from 'css-module-class-lister';\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport Persons from '../components/Persons/Persons';\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props);\n    console.log('[App.js] Inside constructor', props);\n  }\n  state = {\n    persons: [\n      { id: 'gsfhgh', name: 'Max', age: 29 },\n      { id: 'sfgdshgh', name: 'Manu', age: 28 },\n      { id: 'rgjjyt', name: 'Stephanie', age: 26 }\n    ],\n    showPersons: false\n  };\n\n  componentWillMount() {\n    console.log('[App.js] Inside componentWillMount()');\n  }\n\n  componentDidMount() {\n    console.log('[App.js] Inside componentDidMount()');\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    console.log(\n      '[UPDATE App.js] Inside componentReceiveProps',\n      nextProps,\n      nextContext\n    );\n  }\n  /* shouldComponentUpdate(nextProps, nextState, nextContext) {\n    console.log(\n      '[UPDATE App.js] Inside shouldComponentUpdate',\n      nextProps,\n      nextState,\n      nextContext\n    );\n    return (\n      this.state.persons !== nextState.persons ||\n      this.state.showPersons !== nextState.showPersons\n    );\n  }// */\n  componentWillUpdate(nextProps, nextState, nextContext) {\n    console.log(\n      '[UPDATE App.js] Inside componentWillUpdate',\n      nextProps,\n      nextState,\n      nextContext\n    );\n  }\n  componentDidUpdate(nextProps, nextState, nextContext) {\n    console.log(\n      '[UPDATE App.js] Inside componentDidUpdate',\n      nextProps,\n      nextState,\n      nextContext\n    );\n  }\n\n  nameChangedHandler = (evt, id) => {\n    const personIndex = this.state.persons.findIndex(p => p.id === id);\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n    person.name = evt.target.value;\n    const newPersons = [\n      ...this.state.persons.slice(0, personIndex),\n      person,\n      ...this.state.persons.slice(personIndex + 1)\n    ];\n    this.setState({\n      persons: newPersons\n    });\n  };\n\n  toggleShowPersons = () => {\n    this.setState({\n      showPersons: !this.state.showPersons\n    });\n  };\n\n  deletePersonHandler = personIndex => {\n    const { persons } = this.state;\n    const newPersons = [\n      ...persons.slice(0, personIndex),\n      ...persons.slice(personIndex + 1)\n    ];\n    this.setState({\n      persons: newPersons\n    });\n  };\n\n  render() {\n    console.log('[App.js] Inside render()');\n    const classes = classLister(styles);\n    let persons = null;\n    if (this.state.showPersons) {\n      persons = (\n        <Persons\n          persons={this.state.persons}\n          clicked={this.deletePersonHandler}\n          changed={this.nameChangedHandler}\n        />\n      );\n    }\n    return (\n      <div className={classes('App', 'D-flex-c')}>\n        <button onClick={() => this.setState({ showPersons: true })}>\n          Show Persons\n        </button>\n        <Cockpit\n          toggleShowPersons={this.toggleShowPersons}\n          persons={this.state.persons}\n          showPersons={this.state.showPersons}\n        />\n        {persons}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App title=\"Relevant People\">Relevant Persons</App>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}